import _defineProperty from '@babel/runtime/helpers/defineProperty';
import BaseBuilder from '../BaseBuilder/BaseBuilder.js';
import GarminPoint from './models/GarminPoint.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class GarminBuilder extends BaseBuilder {
  /**
   * Garmin builder include extension for speed, hear rate, cadence, ...
   */
  constructor() {
    super();
    this.schemaLocation = [...this.schemaLocation, 'http://www.garmin.com/xmlschemas/TrackPointExtension/v1', 'http://www.garmin.com/xmlschemas/TrackPointExtensionv1.xsd', 'http://www.garmin.com/xmlschemas/GpxExtensions/v3', 'http://www.garmin.com/xmlschemas/GpxExtensionsv3.xsd'];
    this.data = _objectSpread(_objectSpread({}, this.data), {}, {
      attributes: _objectSpread(_objectSpread({}, this.data.attributes), {}, {
        'xmlns:gpxtpx': 'http://www.garmin.com/xmlschemas/TrackPointExtension/v1',
        'xmlns:gpxx': 'http://www.garmin.com/xmlschemas/GpxExtensions/v3'
      })
    });
  }

}
GarminBuilder.MODELS = _objectSpread(_objectSpread({}, BaseBuilder.MODELS), {}, {
  Point: GarminPoint
});

export { GarminBuilder as default };
