import _defineProperty from '@babel/runtime/helpers/defineProperty';
import * as index from './models/index.js';
import Track from './models/Track.js';
import Segment from './models/Segment.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class BaseBuilder {
  constructor() {
    this.data = void 0;
    this.schemaLocation = void 0;
    this.data = {};
    this.schemaLocation = ['http://www.topografix.com/GPX/1/1', 'http://www.topografix.com/GPX/1/1/gpx.xsd'];
  }
  /**
   * Set metadata object.
   *
   * @param metadata - Metadata object
   * @returns {BaseBuilder} self
   */


  setMetadata(metadata) {
    this.data.metadata = metadata.toObject();
    return this;
  }
  /**
   * Set list of waypoints
   *
   * @param waypoints - Points objects
   * @returns {BaseBuilder} self
   */


  setWayPoints(waypoints) {
    this.data.wpt = waypoints.map(point => point.toObject());
    return this;
  }
  /**
   * Set list of routes.
   *
   * @param routes - List of routes
   * @returns {BaseBuilder} self
   */


  setRoutes(routes) {
    this.data.rte = routes;
    return this;
  }
  /**
   * Set list of tracks.
   *
   * @param tracks - List of tracks
   * @returns {BaseBuilder} self
   */


  setTracks(tracks) {
    this.data.trk = tracks.map(track => track.toObject());
    return this;
  }
  /**
   * Set extension Object.
   *
   * @param extensions - Extensions
   * @returns {BaseBuilder} self
   */


  setExtensions(extensions) {
    this.data.extensions = extensions;
    return this;
  }
  /**
   * Simple method to set list of points to single track and segment.
   *
   * @param points - list of Points
   * @returns {BaseBuilder} self
   */


  setSegmentPoints(points) {
    this.setTracks([new Track([new Segment(points)])]);
    return this;
  }
  /**
   * Object that can be used to build XML file.
   *
   * @returns {GPXBuildData}
   */


  toObject() {
    return _objectSpread(_objectSpread({}, this.data), {}, {
      attributes: _objectSpread({
        'creator': 'fabulator:gpx-builder',
        'version': '1.1',
        'xmlns': 'http://www.topografix.com/GPX/1/1',
        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
        'xsi:schemaLocation': this.schemaLocation.join(' ')
      }, this.data.attributes)
    });
  }

}
BaseBuilder.MODELS = index;

export { BaseBuilder as default };
