import _defineProperty from '@babel/runtime/helpers/defineProperty';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class Point {
  /**
   * @see http://www.topografix.com/gpx/1/1/#type_wptType
   */
  // eslint-disable-next-line complexity, sonarjs/cognitive-complexity
  constructor(lat, lon, {
    ele,
    time,
    magvar,
    geoidheight,
    name,
    cmt,
    desc,
    src,
    link,
    sym,
    type,
    fix,
    sat,
    hdop,
    vdop,
    pdop,
    ageofdgpsdata,
    dgpsid,
    extensions
  } = {}) {
    this.lat = void 0;
    this.lon = void 0;
    this.ele = void 0;
    this.time = void 0;
    this.magvar = void 0;
    this.geoidheight = void 0;
    this.name = void 0;
    this.cmt = void 0;
    this.desc = void 0;
    this.src = void 0;
    this.link = void 0;
    this.sym = void 0;
    this.type = void 0;
    this.fix = void 0;
    this.sat = void 0;
    this.hdop = void 0;
    this.vdop = void 0;
    this.pdop = void 0;
    this.ageofdgpsdata = void 0;
    this.dgpsid = void 0;
    this.extensions = void 0;
    this.lat = lat;
    this.lon = lon;
    this.ele = ele || null;
    this.time = time || null;
    this.magvar = magvar || null;
    this.geoidheight = geoidheight || null;
    this.name = name || null;
    this.cmt = cmt || null;
    this.desc = desc || null;
    this.src = src || null;
    this.link = link || null;
    this.sym = sym || null;
    this.type = type || null;
    this.fix = fix || null;
    this.sat = sat || null;
    this.hdop = hdop || null;
    this.vdop = vdop || null;
    this.pdop = pdop || null;
    this.ageofdgpsdata = ageofdgpsdata || null;
    this.dgpsid = dgpsid || null;
    this.extensions = extensions || null;
  } // eslint-disable-next-line complexity, sonarjs/cognitive-complexity


  toObject() {
    const {
      lat,
      lon,
      ele,
      time,
      magvar,
      geoidheight,
      name,
      cmt,
      desc,
      src,
      link,
      sym,
      type,
      fix,
      sat,
      hdop,
      vdop,
      pdop,
      ageofdgpsdata,
      dgpsid,
      extensions
    } = this;
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
      attributes: {
        lat,
        lon
      }
    }, ele ? {
      ele
    } : {}), time ? {
      time
    } : {}), magvar ? {
      magvar
    } : {}), geoidheight ? {
      geoidheight
    } : {}), name ? {
      name
    } : {}), cmt ? {
      cmt
    } : {}), desc ? {
      desc
    } : {}), src ? {
      src
    } : {}), link ? {
      link: link.toObject()
    } : {}), sym ? {
      sym
    } : {}), type ? {
      type
    } : {}), fix ? {
      fix
    } : {}), sat ? {
      sat
    } : {}), hdop ? {
      hdop
    } : {}), vdop ? {
      vdop
    } : {}), pdop ? {
      pdop
    } : {}), ageofdgpsdata ? {
      ageofdgpsdata
    } : {}), dgpsid ? {
      dgpsid
    } : {}), extensions && Object.keys(extensions).length > 0 ? {
      extensions
    } : {});
  }

}

export { Point as default };
