"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGradeAdjustedPaceMinutesPerMile = exports.DataGradeAdjustedPace = void 0;
var helpers_1 = require("../events/utilities/helpers");
var data_pace_1 = require("./data.pace");
var DataGradeAdjustedPace = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedPace, _super);
    function DataGradeAdjustedPace() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedPace.prototype.getValue = function (formatForDataType) {
        switch (formatForDataType) {
            case DataGradeAdjustedPaceMinutesPerMile.type:
                return helpers_1.convertPaceToPaceInMinutesPerMile(this.value);
            default:
                return _super.prototype.getValue.call(this, formatForDataType);
        }
    };
    DataGradeAdjustedPace.type = 'Grade Adjusted Pace';
    DataGradeAdjustedPace.unit = 'min/km';
    return DataGradeAdjustedPace;
}(data_pace_1.DataPace));
exports.DataGradeAdjustedPace = DataGradeAdjustedPace;
var DataGradeAdjustedPaceMinutesPerMile = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedPaceMinutesPerMile, _super);
    function DataGradeAdjustedPaceMinutesPerMile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedPaceMinutesPerMile.prototype.getValue = function (formatForDataType) {
        if (formatForDataType) {
            throw new Error("Not implemented");
        }
        return _super.prototype.getValue.call(this, formatForDataType);
    };
    DataGradeAdjustedPaceMinutesPerMile.type = 'Grade Adjusted Pace in minutes per mile';
    DataGradeAdjustedPaceMinutesPerMile.displayType = DataGradeAdjustedPace.type;
    DataGradeAdjustedPaceMinutesPerMile.unit = 'min/m';
    return DataGradeAdjustedPaceMinutesPerMile;
}(DataGradeAdjustedPace));
exports.DataGradeAdjustedPaceMinutesPerMile = DataGradeAdjustedPaceMinutesPerMile;
