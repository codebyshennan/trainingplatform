"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataGradeAdjustedSpeedKnots = exports.DataGradeAdjustedSpeedFeetPerMinute = exports.DataGradeAdjustedSpeedMetersPerMinute = exports.DataGradeAdjustedSpeedFeetPerSecond = exports.DataGradeAdjustedSpeedMilesPerHour = exports.DataGradeAdjustedSpeedKilometersPerHour = exports.DataGradeAdjustedSpeed = void 0;
var helpers_1 = require("../events/utilities/helpers");
var data_grade_adjusted_pace_1 = require("./data.grade-adjusted-pace");
var data_speed_1 = require("./data.speed");
var DataGradeAdjustedSpeed = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedSpeed, _super);
    function DataGradeAdjustedSpeed() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedSpeed.prototype.getValue = function (formatForDataType) {
        switch (formatForDataType) {
            // Speed cases conversions
            case DataGradeAdjustedSpeedKilometersPerHour.type:
                return helpers_1.convertSpeedToSpeedInKilometersPerHour(this.value);
            case DataGradeAdjustedSpeedMilesPerHour.type:
                return helpers_1.convertSpeedToSpeedInMilesPerHour(this.value);
            case DataGradeAdjustedSpeedFeetPerSecond.type:
                return helpers_1.convertSpeedToSpeedInFeetPerSecond(this.value);
            case DataGradeAdjustedSpeedMetersPerMinute.type:
                return helpers_1.convertSpeedToSpeedInMetersPerMinute(this.value);
            case DataGradeAdjustedSpeedFeetPerMinute.type:
                return helpers_1.convertSpeedToSpeedInFeetPerMinute(this.value);
            case DataGradeAdjustedSpeedKnots.type:
                return helpers_1.convertSpeedToSpeedInKnots(this.value);
            // Pace
            case data_grade_adjusted_pace_1.DataGradeAdjustedPace.type:
                return helpers_1.convertSpeedToPace(this.value);
            case data_grade_adjusted_pace_1.DataGradeAdjustedPaceMinutesPerMile.type:
                return helpers_1.convertPaceToPaceInMinutesPerMile(helpers_1.convertSpeedToPace(this.value));
            default:
                return _super.prototype.getValue.call(this, formatForDataType);
        }
    };
    DataGradeAdjustedSpeed.type = 'Grade Adjusted Speed';
    return DataGradeAdjustedSpeed;
}(data_speed_1.DataSpeed));
exports.DataGradeAdjustedSpeed = DataGradeAdjustedSpeed;
var DataGradeAdjustedSpeedKilometersPerHour = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedSpeedKilometersPerHour, _super);
    function DataGradeAdjustedSpeedKilometersPerHour() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedSpeedKilometersPerHour.prototype.getDisplayType = function () {
        return _super.prototype.getDisplayType.call(this);
    };
    DataGradeAdjustedSpeedKilometersPerHour.type = 'Grade Adjusted Speed in kilometers per hour';
    DataGradeAdjustedSpeedKilometersPerHour.displayType = DataGradeAdjustedSpeed.type;
    DataGradeAdjustedSpeedKilometersPerHour.unit = 'km/h';
    return DataGradeAdjustedSpeedKilometersPerHour;
}(DataGradeAdjustedSpeed));
exports.DataGradeAdjustedSpeedKilometersPerHour = DataGradeAdjustedSpeedKilometersPerHour;
var DataGradeAdjustedSpeedMilesPerHour = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedSpeedMilesPerHour, _super);
    function DataGradeAdjustedSpeedMilesPerHour() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedSpeedMilesPerHour.prototype.getDisplayType = function () {
        return _super.prototype.getDisplayType.call(this);
    };
    DataGradeAdjustedSpeedMilesPerHour.type = 'Grade Adjusted Speed in miles per hour';
    DataGradeAdjustedSpeedMilesPerHour.displayType = DataGradeAdjustedSpeed.type;
    DataGradeAdjustedSpeedMilesPerHour.unit = 'mph';
    return DataGradeAdjustedSpeedMilesPerHour;
}(DataGradeAdjustedSpeed));
exports.DataGradeAdjustedSpeedMilesPerHour = DataGradeAdjustedSpeedMilesPerHour;
var DataGradeAdjustedSpeedFeetPerSecond = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedSpeedFeetPerSecond, _super);
    function DataGradeAdjustedSpeedFeetPerSecond() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedSpeedFeetPerSecond.prototype.getDisplayType = function () {
        return _super.prototype.getDisplayType.call(this);
    };
    DataGradeAdjustedSpeedFeetPerSecond.type = 'Grade Adjusted Speed in feet per second';
    DataGradeAdjustedSpeedFeetPerSecond.displayType = DataGradeAdjustedSpeed.type;
    DataGradeAdjustedSpeedFeetPerSecond.unit = 'ft/s';
    return DataGradeAdjustedSpeedFeetPerSecond;
}(DataGradeAdjustedSpeed));
exports.DataGradeAdjustedSpeedFeetPerSecond = DataGradeAdjustedSpeedFeetPerSecond;
var DataGradeAdjustedSpeedMetersPerMinute = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedSpeedMetersPerMinute, _super);
    function DataGradeAdjustedSpeedMetersPerMinute() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedSpeedMetersPerMinute.prototype.getDisplayType = function () {
        return _super.prototype.getDisplayType.call(this);
    };
    DataGradeAdjustedSpeedMetersPerMinute.type = 'Grade Adjusted Speed in meters per minute';
    DataGradeAdjustedSpeedMetersPerMinute.displayType = DataGradeAdjustedSpeed.type;
    DataGradeAdjustedSpeedMetersPerMinute.unit = 'm/min';
    return DataGradeAdjustedSpeedMetersPerMinute;
}(DataGradeAdjustedSpeed));
exports.DataGradeAdjustedSpeedMetersPerMinute = DataGradeAdjustedSpeedMetersPerMinute;
var DataGradeAdjustedSpeedFeetPerMinute = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedSpeedFeetPerMinute, _super);
    function DataGradeAdjustedSpeedFeetPerMinute() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedSpeedFeetPerMinute.prototype.getDisplayType = function () {
        return _super.prototype.getDisplayType.call(this);
    };
    DataGradeAdjustedSpeedFeetPerMinute.type = 'Grade Adjusted Speed in feet per minute';
    DataGradeAdjustedSpeedFeetPerMinute.displayType = DataGradeAdjustedSpeed.type;
    DataGradeAdjustedSpeedFeetPerMinute.unit = 'ft/min';
    return DataGradeAdjustedSpeedFeetPerMinute;
}(DataGradeAdjustedSpeed));
exports.DataGradeAdjustedSpeedFeetPerMinute = DataGradeAdjustedSpeedFeetPerMinute;
var DataGradeAdjustedSpeedKnots = /** @class */ (function (_super) {
    __extends(DataGradeAdjustedSpeedKnots, _super);
    function DataGradeAdjustedSpeedKnots() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataGradeAdjustedSpeedKnots.prototype.getDisplayType = function () {
        return _super.prototype.getDisplayType.call(this);
    };
    DataGradeAdjustedSpeedKnots.type = 'Grade Adjusted Speed in knots';
    DataGradeAdjustedSpeedKnots.displayType = DataGradeAdjustedSpeed.type;
    DataGradeAdjustedSpeedKnots.unit = 'kn';
    return DataGradeAdjustedSpeedKnots;
}(DataGradeAdjustedSpeed));
exports.DataGradeAdjustedSpeedKnots = DataGradeAdjustedSpeedKnots;
