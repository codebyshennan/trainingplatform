"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LowPassFilter = void 0;
var helpers_1 = require("../helpers");
var LowPassFilter = /** @class */ (function () {
    function LowPassFilter(smoothing) {
        this._smoothing = smoothing || 0.5; // must be smaller than 1
        this._buffer = []; // FIFO queue
        this._bufferMaxSize = 10;
    }
    /**
     * Init buffer with array of values
     * @param {number[]} values
     * @returns {number[]}
     */
    LowPassFilter.prototype.init = function (values) {
        for (var i = 0; i < values.length; i++) {
            this.__push(values[i]);
        }
        return this._buffer;
    };
    /**
     * Add new value to buffer (FIFO queue)
     * @param {number} value
     * @returns {number}
     * @private
     */
    LowPassFilter.prototype.__push = function (value) {
        var removed = (this._buffer.length === this._bufferMaxSize) ? this._buffer.shift() : 0;
        this._buffer.push(value);
        return removed;
    };
    /**
     * Smooth value from stream
     * @param {number} nextValue
     * @returns {number}
     */
    LowPassFilter.prototype.next = function (nextValue) {
        var self = this;
        // push new value to the end, and remove oldest one
        var removed = this.__push(nextValue);
        // smooth value using all values from buffer
        var result = this._buffer.reduce(function (last, current) {
            return self._smoothing * current + (1 - self._smoothing) * last;
        }, removed);
        // replace smoothed value
        this._buffer[this._buffer.length - 1] = result;
        return result;
    };
    /**
     * Smooth array of values
     * @param {number[]} values
     * @returns {number[]}
     */
    LowPassFilter.prototype.smoothArray = function (values) {
        var value = values.filter(function (v) { return helpers_1.isNumber(v); })[0];
        if (!value) {
            return values;
        }
        for (var i = 1; i < values.length; i++) {
            if (values[i] === null) {
                continue;
            }
            var currentValue = values[i];
            value += (currentValue - value) * this._smoothing;
            values[i] = Math.round(value * 10) / 10;
        }
        return values;
    };
    Object.defineProperty(LowPassFilter.prototype, "bufferMaxSize", {
        get: function () {
            return this._bufferMaxSize;
        },
        set: function (value) {
            this._bufferMaxSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LowPassFilter.prototype, "buffer", {
        get: function () {
            return this._buffer;
        },
        set: function (value) {
            this._buffer = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LowPassFilter.prototype, "smoothing", {
        get: function () {
            return this._smoothing;
        },
        set: function (value) {
            this._smoothing = value;
        },
        enumerable: false,
        configurable: true
    });
    return LowPassFilter;
}());
exports.LowPassFilter = LowPassFilter;
