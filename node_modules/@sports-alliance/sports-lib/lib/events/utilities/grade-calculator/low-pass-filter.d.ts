export declare class LowPassFilter {
    private _bufferMaxSize;
    private _buffer;
    private _smoothing;
    constructor(smoothing?: number);
    /**
     * Init buffer with array of values
     * @param {number[]} values
     * @returns {number[]}
     */
    init(values: number[]): number[];
    /**
     * Add new value to buffer (FIFO queue)
     * @param {number} value
     * @returns {number}
     * @private
     */
    __push(value: number): number;
    /**
     * Smooth value from stream
     * @param {number} nextValue
     * @returns {number}
     */
    next(nextValue: number): number;
    /**
     * Smooth array of values
     * @param {number[]} values
     * @returns {number[]}
     */
    smoothArray(values: (number | null)[]): (number | null)[];
    get bufferMaxSize(): number;
    set bufferMaxSize(value: number);
    get buffer(): number[];
    set buffer(value: number[]);
    get smoothing(): number;
    set smoothing(value: number);
}
