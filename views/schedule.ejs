<%- include('header', {index: `${data.index}`, title: `${data.title}`, username: `${data.username}`}) -%>
<link href="/static/main.css" rel="stylesheet" />
<script src="/static/main.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/luxon@2.0.2/build/global/luxon.min.js"></script>

<script>
  

  document.addEventListener("DOMContentLoaded", function () {
    var calendarEl = document.getElementById("calendar");
    var calendar = new FullCalendar.Calendar(calendarEl, {
      themeSystem: "bootstrap",
      headerToolbar: {
        left: "prev,next today",
        center: "title",
        right: "dayGridMonth,timeGridWeek,listMonth",
      },
      eventDisplay: 'auto',
      initialView: "dayGridMonth",
      navlinks: true, // can click day/week names to navigate views
      selectable: true,
      editable: true, // determines if the event can be dragged or resized
      dayMaxEvents: true, // allow 'more' link when too many events
      longPressDelay: 1000,
      
      events: [
        <% JSON.parse(data.data).forEach( (event) => { %>
        // populate this list from ejs
        {
          id: <%= event.id %>,
          title: "<%= event.title %>",
          start: "<%= event.date%>",
          end: "<%= event.date%>",
          color: new Date('<%= event.date%>') > new Date() ? 'grey': '',
          textColor: 'black',
          // backgroundColor: 'red',
          // borderColor: 'white',
          extendedProps: {
            activitytype : "<%= event.activitytype%>",
            distance : "<%= event.distance%>",
            calories : "<%= event.calories%>",
            timetaken : "<%= event.timetaken%>",
            avghr : "<%= event.avghr %>",
            maxhr : "<%= event.maxhr %>",
            createdon : "<%=event.createdon%>",
          }
        },

        <% }); %>
      ],
      eventTimeFormat: { // like '14:30:00'
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        meridiem: false
      },
      eventClick: (info) => {
        console.log('event >> ', info)
        const modalTitle = document.getElementById('infoModalTitle');
        modalTitle.innerText = info.event.title;

        const modalBody = document.getElementById('infoModalBody');
        modalBody.innerHTML = 
          `<p>${info.event.extendedProps.activitytype}</p>
          <p>${info.event.extendedProps.distance}</p>
          <p>${info.event.extendedProps.calories}</p>
          <p>${info.event.extendedProps.timetaken}</p>
          <p>${info.event.extendedProps.avghr}</p>
          <p>${info.event.extendedProps.maxhr}</p>
          <p>${info.event.extendedProps.createdon}</p>`;
        const infoModal = new bootstrap.Modal(document.getElementById('infoModal'));
        infoModal.toggle();

      },
      select: (info) => {
        console.log('info >> ', info)
        // modalTitle.innerText = info.event.title;
        // modalBody.innerText = info.event.description;
        var newModal = new bootstrap.Modal(document.getElementById('makeNewModal'));
        newModal.toggle();
      },
      eventDrop: (info) => {

        // route used to query an update to the db every drag and drop
        axios({
            method: 'post',
            headers: {
              'Content-Type': 'application/json',
            },
            url: '/athlete/<%=data.index%>/schedule',
            data: {
              id: `${info.event.id}`,
              date: `${luxon.DateTime.fromISO(info.event.start.toISOString()).toFormat('yyyy-MM-dd')}`
            }
          }).then((response)=> {console.log(response)});
        console.log(info);
        // if (!confirm("Are you sure about this change?")) {
        //   info.revert();
        // }
      }
    });
    calendar.render();
  });
</script>

<style>

  #loading {
    display: none;
    position: absolute;
    top: 10px;
    right: 10px;
  }

  #calendar {
    max-width: 100%;
    max-height: 100%;
    margin: 0 auto;
  }

  .btn-circle {
    width: 30px;
    height: 30px;
    padding: 6px 0px;
    border-radius: 15px;
    text-align: center;
    font-size: 12px;
    line-height: 1.42857;
  }
</style>

<p></p>
    <!-- Init Table -->
<div
  id="calendar"
  class="fc fc-media-screen fc-direction-ltr fc-theme-standard"
></div>

<div id="makeNewModal" class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h4 id="makeNewModalTitle" class="modal-title">Add New Activity</h4>
        <button type="button" class="close" data-bs-dismiss="modal">
          <span aria-hidden="true">×</span>
          <span class="sr-only">close</span>
        </button>
      </div>

      <div id="makeNewModalBody" class="modal-body">
        <form method='POST' action='addactivity'>
          <div class="form-row">
            <% JSON.parse(data.columnnames).forEach(column => {%> 
            <div class="form-group col-md-6">
              <label for="<%= column %>"><%= column %></label>
              <input
                type="<%= column %>"
                class="form-control"
                id="<%= column %>"
                name = "<%= column %>"
              />
            </div>
            <% }); %> 
          <button type="submit" class="btn btn-primary"> Add </button>
          </div>
        </form>

        <div class="form-row">
          <form action="schedule/addactivity" method="post" enctype="multipart/form-data">
            <label for="label">Upload training file:</label><br />
            <input type="text" id="label" name="label" /><br />
            <label for="file">Training File:</label><br />
            <input type="file" name="trainingfile" />
            <input type="submit" value="Submit" />
          </form>
        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-bs-dismiss="modal">
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal -->
<div id="infoModal" class="modal fade">
<div class="modal-dialog">
  <div class="modal-content">
    <div class="modal-header">
      <h4 class="modal-title" id="infoModalTitle"></h4>
      <button type="button" class="close" data-bs-dismiss="modal">
          <span aria-hidden="true">×</span>
          <span class="sr-only">close</span>
        </button>
    </div>
    <div class="modal-body" id="infoModalBody">
    </div>
    <div class="modal-footer">
    </div>
  </div>
</div>
</div>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary btn-circle" data-bs-toggle="modal" data-bs-target="#makeNewModal">
  <i class="fa fa-plus"></i>
</button>

</body>
</html>
