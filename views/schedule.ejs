<%- include('header', {index: `${data.index}`, title: `${data.title}`, username: `${data.username}`}) -%>
<link href="/static/main.css" rel="stylesheet" />
<script src="/static/main.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/luxon@2.0.2/build/global/luxon.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.0.1/chart.min.js"></script>
<script src="/static/chartjs-dragdata.js"></script>

<style>
  /* .row > * {
    border: 0.1px solid black;
  } */
  .modal-xl{
    max-width: 95vw;
    max-height: 95vh;
  }
  .smiley {
    background-color: transparent;
    border: none;
    color: rgba(0,0,0,0.2);
  }

  .smiley:hover {
    color: black;
  }

  input[type=text], input[type=textarea], select{
    background-color: transparent;
  }
  input[type=radio] { 
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  input[type=radio]:checked + i {
    color:black;
  }

  input[type="file"]{
    display: none;
  }

  .uploadbutton {
      border: 1px solid #ccc;
      display: inline-block;
      padding: 6px 12px;
      cursor: pointer;
  }

  #workoutcard {
    background-color: rgba(0,0,0,0.2);
    border-radius: 8px;
  }

</style>
<script defer>

document.addEventListener('DOMContentLoaded', ()=>{
    
  const startdate = document.querySelector('#startdate');
  const datecontainer = document.getElementById('datecontainer');
  const activitytype = document.getElementById('activitytype');
  const activitylist = document.getElementById('activitylist');
  const rangevalue = document.getElementById('rangevalue');
  const perceivedexertion = document.getElementById('perceivedexertion');
  const feelingvalue = document.getElementById('feelingvalue');
  const smileys = document.querySelectorAll('input.smiley')
  const plannedavgpace = document.getElementById('plannedavgpace');
  const timetaken = document.getElementById('timetaken');
  const plannedtime = document.getElementById('plannedtime');
  const actualavgpace = document.getElementById('actualavgpace');
  const distancevalue = document.getElementById('distancevalue');
  const planneddistance = document.getElementById('planneddistance');
  const workoutcard = document.getElementById('workoutcard');
  const formentry = document.getElementById('formentry');
  const meridiem = ['am','pm']
  const interval = ['00','15','30','45'];
  const timelist = document.getElementById('timelist');
  const actualtimetaken = document.getElementById('actualtimetaken');
  const avgpace = document.getElementById('avgpace');
  const trainingfile = document.getElementById('trainingfile');
  const filepath = document.getElementById('filepath');

  startdate.addEventListener('focus', (e) => {
    e.target.type='date';
    if(e.target.value) {
      e.target.value = e.target.datavalue;
    }
  }, true)

  startdate.addEventListener('blur', (e) => {
      e.target.type = 'text';
  }, true)

  startdate.addEventListener('change', (e)=> {
      let temp = e.target.value;
      e.target.placeholder = (new Date(e.target.value)).toString().substr(0,15);
      e.target.datavalue = temp;
      datecontainer.value = temp;
      e.target.value = "";
      e.target.type='text';
  }, true)

  for(let j=0;j<2;j++){
    for(let i = 0; i<12; i++){
      for(int in interval) {
        
        timelist.add(new Option
        ((i==0?12:i).toString() + ':'+ interval[int] + ' '+ meridiem[j], 
        i.toString() + ':' + interval[int]))
      }
    }
  }

  activitylist.addEventListener('change', (e)=>{
    const value = e.target.value;
    switch (value) {
      case "swimming":
        activitytype.innerHTML = `<i class="fas fa-swimmer" style="font-size: 3rem"></i>`
        break;

      case "running":
        activitytype.innerHTML = `<i class="fas fa-running" style="font-size: 3rem"></i>`
        break;

      case "cycling":
        activitytype.innerHTML = `<i class="fas fa-biking" style="font-size: 3rem"></i>`
        break;

      case "gym":
        activitytype.innerHTML = `<i class="fas fa-dumbbell" style="font-size: 3rem"></i>`
        break;

      default:
        break;
    }
  })

  perceivedexertion.addEventListener('change', (e)=>{
    switch (e.target.value) {
      case '1':
      case '2':
      case '3':
        rangevalue.innerText = `Your RPE is ${e.target.value}. You feel that the training intensity is easy.`;
        break;
      
      case '4':
      case '5':
      case '6':
        rangevalue.innerText = `Your RPE is ${e.target.value}. You feel that the training intensity is moderate.`;
        break;

      case '7':
      case '8':
      case '9':
        rangevalue.innerText = `Your RPE is ${e.target.value}. You feel that the training intensity is high.`;
        break;

      case '10':
        rangevalue.innerText = `Your RPE is ${e.target.value}. You feel like dying.`;
        break;
    
      default:
        rangevalue.innerText = `Select a range value.`;
        break;
    }
    
  })

  smileys.forEach((x)=>
    x.addEventListener('click',(ev)=> {
      feelingvalue.innerHTML = ev.target.nextElementSibling.outerHTML;
    }
    ))

  plannedtime.addEventListener('change', (ev)=>{
      const durationarray = ev.target.value.split(':')
      if(durationarray.length===1){
        ev.target.value = (durationarray[0].length == 1 ? '0' + durationarray[0] : (durationarray[0] || '00')) + ':00:00';
        timetaken.innerText = ev.target.value;
      } else if (durationarray.length == 2){
        ev.target.value = (durationarray[0].length == 1 ? '0' + durationarray[0] : (durationarray[0] || '00')) + ':' +
        (durationarray[1].length == 1 ? '0' + durationarray[1] : (durationarray[1] || '00')) +':00';
        timetaken.innerText = ev.target.value;
      } else {
        ev.target.value = (durationarray[0].length == 1 ? '0' + durationarray[0] : (durationarray[0] || '00')) + ':' + (durationarray[1].length == 1 ? '0' + durationarray[1] : (durationarray[1] || '00')) + ':' +(durationarray[2].length == 1 ? '0' + durationarray[2] : (durationarray[2] || '00'));
        timetaken.innerText = ev.target.value;
      }
    })

  actualtimetaken.addEventListener('change', (ev)=>{
      const durationarray = ev.target.value.split(':')
      if(durationarray.length===1){
        ev.target.value = (durationarray[0].length == 1 ? '0' + durationarray[0] : (durationarray[0] || '00')) + ':00:00';
        timetaken.innerText = ev.target.value;
      } else if (durationarray.length == 2){
        ev.target.value = (durationarray[0].length == 1 ? '0' + durationarray[0] : (durationarray[0] || '00')) + ':' +
        (durationarray[1].length == 1 ? '0' + durationarray[1] : (durationarray[1] || '00')) +':00';
        timetaken.innerText = ev.target.value;
      } else {
        ev.target.value = (durationarray[0].length == 1 ? '0' + durationarray[0] : (durationarray[0] || '00')) + ':' + (durationarray[1].length == 1 ? '0' + durationarray[1] : (durationarray[1] || '00')) + ':' +(durationarray[2].length == 1 ? '0' + durationarray[2] : (durationarray[2] || '00'));
        timetaken.innerText = ev.target.value;
      }
    })
  
  planneddistance.addEventListener('change', (ev)=>{
      const num = Number(ev.target.value);
      ev.target.value = num.toFixed(2)
      distancevalue.innerText = ev.target.value;
      } );

  actualdistance.addEventListener('change', (ev)=>{
      const num = Number(ev.target.value);
      ev.target.value = num.toFixed(2)
      distancevalue.innerText = ev.target.value;
      } );

  formentry.addEventListener('change',(ev)=>{

    const plantimearray = plannedtime.value.split(':')
    const actualtimearray = actualtimetaken.value.split(':')
    const gettime = (array) => {
      const hours = +array[0] * 60 * 60;
      const minutes = +array[1] * 60;
      const seconds = +array[2];
      return hours+minutes+seconds;
    }
    
    const plantimevalue = gettime(plantimearray)
    const actualtimevalue = gettime(actualtimearray)

    if(planneddistance.value && plantimevalue) {
      const plannedpacevalue = (+planneddistance.value * 60 * 60 / plantimevalue).toFixed(2)
      plannedavgpace.value = isNaN(plannedpacevalue) ? 0: plannedpacevalue;
    }

    if(actualdistance.value && actualtimevalue) {
      const actualpacevalue = (+actualdistance.value * 60 * 60 / actualtimevalue).toFixed(2)
      actualavgpace.value = isNaN(actualpacevalue) ? 0 : actualpacevalue;
      avgpace.value = isNaN(actualpacevalue) ? 0 : actualpacevalue;
    }

    if(plannedavgpace.value && actualavgpace.value){
       const comparepace = Math.abs(Number(plannedavgpace.value) - Number(actualavgpace.value)) / Number(plannedavgpace.value);

       console.log(comparepace)

      switch (true) {
        case comparepace <= 0.2:
          workoutcard.style.backgroundColor = 'rgb(127,192,98)';
          break;
        case comparepace <= 0.5:
          workoutcard.style.backgroundColor = 'rgb(253,202,46)';
          break;
        case comparepace <= 0.9:
          workoutcard.style.backgroundColor = 'rgb(253,148,44)';
          break;
        
        case comparepace == 1:
          workoutcard.style.backgroundColor = 'rgb(211,10,38)';
          break;
      
        default:
          workoutcard.style.backgroundColor = 'rgb(210,210,210)';
          break;
      }
    }
  })

trainingfile.addEventListener('change', (ev)=> {
  filepath.innerText = ev.target.value;
})


})
</script>


<script>
  

  document.addEventListener("DOMContentLoaded", function () {
    var calendarEl = document.getElementById("calendar");
    var calendar = new FullCalendar.Calendar(calendarEl, {
      themeSystem: "bootstrap",
      headerToolbar: {
        left: "prev,next today",
        center: "title",
        right: "dayGridMonth,timeGridWeek,listMonth",
      },
      eventDisplay: 'auto',
      initialView: "dayGridMonth",
      navlinks: true, // can click day/week names to navigate views
      selectable: true,
      editable: true, // determines if the event can be dragged or resized
      dayMaxEvents: true, // allow 'more' link when too many events
      longPressDelay: 1000,
      
      events: [
        <% JSON.parse(data.data).forEach( (event) => { %>
        // populate this list from ejs
        {
          id: <%= event.id %>,
          title: "<%= event.title %>",
          start: "<%= event.date%>",
          end: "<%= event.date%>",
          color: new Date('<%= event.date%>') > new Date() ? 'grey': '',
          textColor: 'black',
          // backgroundColor: 'red',
          // borderColor: 'white',
          extendedProps: {
            activitytype : "<%= event.activitytype%>",
            distance : "<%= event.distance%>",
            calories : "<%= event.calories%>",
            timetaken : "<%= event.timetaken%>",
            avghr : "<%= event.avghr %>",
            maxhr : "<%= event.maxhr %>",
            createdon : "<%=event.createdon%>",
          }
        },

        <% }); %>
      ],
      eventTimeFormat: { // like '14:30:00'
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        meridiem: false
      },
      eventClick: (info) => {
        console.log('event >> ', info)
        const modalTitle = document.getElementById('infoModalTitle');
        modalTitle.innerText = info.event.title;

        const modalBody = document.getElementById('infoModalBody');
        modalBody.innerHTML = 
          `<p>${info.event.extendedProps.activitytype}</p>
          <p>${info.event.extendedProps.distance}</p>
          <p>${info.event.extendedProps.calories}</p>
          <p>${info.event.extendedProps.timetaken}</p>
          <p>${info.event.extendedProps.avghr}</p>
          <p>${info.event.extendedProps.maxhr}</p>
          <p>${info.event.extendedProps.createdon}</p>`;
        const infoModal = new bootstrap.Modal(document.getElementById('infoModal'));
        infoModal.toggle();

      },
      select: (info) => {
        console.log('info >> ', info)
        // modalTitle.innerText = info.event.title;
        // modalBody.innerText = info.event.description;
        var newModal = new bootstrap.Modal(document.getElementById('makeNewModal'));
        newModal.toggle();
      },
      eventDrop: (info) => {

        // route used to query an update to the db every drag and drop
        axios({
            method: 'post',
            headers: {
              'Content-Type': 'application/json',
            },
            url: '/athlete/<%=data.index%>/schedule',
            data: {
              id: `${info.event.id}`,
              date: `${luxon.DateTime.fromISO(info.event.start.toISOString()).toFormat('yyyy-MM-dd')}`
            }
          }).then((response)=> {console.log(response)});
        console.log(info);
        // if (!confirm("Are you sure about this change?")) {
        //   info.revert();
        // }
      }
    });
    calendar.render();
  });
</script>

<style>

  #loading {
    display: none;
    position: absolute;
    top: 10px;
    right: 10px;
  }

  #calendar {
    max-width: 100%;
    max-height: 100%;
    margin: 0 auto;
  }

  .btn-circle {
    width: 30px;
    height: 30px;
    padding: 6px 0px;
    border-radius: 15px;
    text-align: center;
    font-size: 12px;
    line-height: 1.42857;
  }
</style>

<p></p>
    <!-- Init Table -->
<div
  id="calendar"
  class="fc fc-media-screen fc-direction-ltr fc-theme-standard"
></div>

<div id="makeNewModal" class="modal fade">
  <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h4 id="makeNewModalTitle" class="modal-title">Add New Activity</h4>
        <button type="button" class="close" data-bs-dismiss="modal">
          <span aria-hidden="true">×</span>
          <span class="sr-only">close</span>
        </button>
      </div>

      <div id="makeNewModalBody" class="modal-body">
        <form action="/test" method="POST" enctype="multipart/form-data" id="trainingform">
          <div class="row justify-content-start" id="startparams" style="padding:10px 10px 10px 10px;">
            <div class="col-2">
              <input type="text" id="startdate"
              placeholder = "Fri 5 Sep 2021"
              datavalue=""
              value=""
              style="border: none; "
                >
              <input type="text" id="datecontainer" name="startdate"
              value=""
              style="display:none "
                >  
            </div>
            <div class="col-2">
              <select name="time" style="border: none;" id="timelist" onblur="(this.type='text')">
                <option hidden>Enter Time</option>
              </select>
            </div>
          </div>
          <!-- overview -->
          <div class="row" id = "builderoptions">
            <div class="col" >
              <div class="row" id = "workoutdetails" style="margin-left:10px">
                <div class="col-10 p-3" id="workoutcard" > 
                  <input type="text" name="title" value="Untitled Workout" style="border: none; width: 100%; margin-left:10px">
                  <div class="row justify-content-center align-items-center" style="height: 100px">
                    <div class="col-2 " id="activitytype">
                      -
                    </div>
                    <div class="col-1">
                      <select name="activitytype" style="border: none;width:20px" id="activitylist">
                          <option hidden></option>
                          <option value="running"> Running </option>
                          <option value="swimming"> Swimming </option>
                          <option value="cycling"> Cycling </option>
                          <option value="gym"> Gym </option>
                        </select>
                    </div>
                    <div class="col-3" style="font-size: 2rem;">
                      <span id="timetaken">--:--:--</span>
                    </div>
                    <div class="col-3" style="font-size: 2rem;">
                      <span id="distancevalue">--</span> <span id="distanceunit"> km</span>
                    </div>
                    <div class="col-1" style="font-size: 2rem;" id="feelingvalue">
                    </div>


                  </div>


                </div>
                <div class="col-2">
                  <div class="row">
                    <p></p>
                  </div>
                  <div class="row text-center" >
                    
                    <span style="font-size: 0.8rem;">These formats are accepted:</span>
                    <br>
                    <span style="font-size: 1rem">.tcx | .gpx | .fit</span>
                  </div>
                  
                  
                  <div class="row" style="padding:0 10px 0 10px;">
                    <label for="trainingfile" class="uploadbutton">
                      <i class="fas fa-file-upload"></i> Upload
                    </label>
                    <input type="file" name="trainingfile" id="trainingfile">
                  </div>

                  <div class="row" style="position:relative;padding:0 10px 0 10px;width: 180px;max-height:50px; word-break: break-all;overflow-y:hidden" id='filepath'>
                  </div>
                  
                  

                </div>
              </div>
            </div>
            <div class="col">
              <div class="row">
                <div class="col-8 " style="padding:10px 10px 10px 10px;">
                  <p></p>
                  <div class="d-flex row text-center align-content-center">
                    <p>Click on blocks to build workout</p></div>
                  <div class="row justify-content-center text-center align-middle" style="font-size:1rem">
                    <div class="col" style="padding:0 0 0 0;border:1px solid grey;margin:0 auto;">
                      <span class"align-middle"><i class="fas fa-chart-area"></i> Warm-up</span>    
                    </div>
                    <div class="col" style="padding:0 0 0 0;border:1px solid grey;margin:0 auto;">
                      <span class"align-middle"><i class="fas fa-chart-area"></i> Active</span>    
                    </div>
                    <div class="col" style="padding:0 0 0 0;border:1px solid grey;margin:0 auto;">
                      <span class"align-middle"><i class="fas fa-chart-area"></i> Recovery</span>    
                    </div>
                    <div class="col" style="padding:0 0 0 0;border:1px solid grey;margin:0 auto;">
                      <span class"align-middle"><i class="fas fa-chart-area"></i> Cool-down</span>    
                    </div>
                  </div>
                  <div class="row justify-content-center text-center align-middle" style="font-size:1rem">
                    <div class="col" style="padding:0 0 0 0;border:1px solid grey;margin:0 auto;">
                      <span class"align-middle"><i class="fas fa-chart-area"></i> Two-Step Repeats</span>    
                    </div>
                    <div class="col" style="padding:0 0 0 0;border:1px solid grey;margin:0 auto;">
                      <span class"align-middle"><i class="fas fa-chart-area"></i> Three-Step Repeats</span>    
                    </div>
                    <div class="col" style="padding:0 0 0 0;border:1px solid grey;margin:0 auto;">
                      <span class"align-middle"><i class="fas fa-chart-area"></i> Ramp Up</span>    
                    </div>
                    <div class="col" style="padding:0 0 0 0;border:1px solid grey;margin:0 auto;">
                      <span class"align-middle"><i class="fas fa-chart-area"></i> Ramp Down</span>    
                    </div>
                  </div>
                </div>
                <div class="col-4">Units</div>
              </div>
            </div>
          </div>

          <!-- ChartJS -->
          <div class="row" style="position: relative; width:100%; margin-top:10px; margin-left: 10px;">
              <canvas id="myChart" width="900" height="100"></canvas>
          </div>

          <p><button class="append-button">Append items</button></p>


          <!-- main -->
          <div class="container-fluid">
            <div class="row">
            <!-- planned/completed -->
              <div class="col-6">
                <div class="row">

                  <!-- split between form entry and workout editor -->
                    <div class="col-6" id="formentry">

                      <!-- start of form entry -->
                      <div class="row text-center d-flex align-items-center p-2">
                        <div class="col-2"></div>
                        <div class="col-4"><strong>Planned</strong></div>
                        <div class="col-4"><strong>Completed</strong></div>
                        <div class="col-2"></div>
                        
                      </div>
                      <!-- Duration -->
                      <div class="d-flex row align-items-center mb-3">
                        <div class="col-2 text-end ">
                          Duration
                        </div>
                        <div class="col-4">
                          <input class="form-control" type="text" id="plannedtime" name="plannedtime"/>
                        </div>
                        <div class="col-4">
                          <input class="form-control" type="text" id="actualtimetaken" name="actualtimetaken"/>
                        </div>
                        <div class="col-2 text-start">
                          h:m:s
                        </div>
                      </div>

                      <!-- Distance -->
                      <div class="d-flex row align-items-center mb-3">
                        <div class="col-2 text-end ">
                          Distance
                        </div>
                        <div class="col-4">
                          <input class="form-control" type="text" id="planneddistance" name="planneddistance"/>
                        </div>
                        <div class="col-4">
                          <input class="form-control" type="text" id="actualdistance" name="actualdistance"/>
                        </div>
                        <div class="col-2 text-start">
                          km
                        </div>
                      </div>

                      <!-- Average Pace -->
                      <div class="d-flex row align-items-center mb-3">
                        <div class="col-2 text-end ">
                          Average Pace
                        </div>
                        <div class="col-4">
                          <input class="form-control" type="text" id="plannedavgpace" name="plannedavgpace" readonly/>
                        </div>
                        <div class="col-4">
                          <input class="form-control" type="text" id="actualavgpace" name="actualavgpace" readonly/>
                        </div>
                        <div class="col-2 text-start">
                          km/h
                        </div>
                      </div>

                      <!-- Calories -->
                      <div class="d-flex row align-items-center mb-3">
                        <div class="col-2 text-end ">
                          Calories
                        </div>
                        <div class="col-4">
                          <input class="form-control" type="text" id="plannedcalories" name="plannedcalories"/>
                        </div>
                        <div class="col-4">
                          <input class="form-control" type="text" id="actualcalories" name="actualcalories"/>
                        </div>
                        <div class="col-2 text-start">
                          kcal
                        </div>
                      </div>

                      <!-- HR -->
                      <div class="row text-center d-flex align-items-center mb-3">
                        <div class="col-2"></div>
                        <div class="col"><strong>Min</strong></div>
                        <div class="col"><strong>Avg</strong></div>
                        <div class="col"><strong>Max</strong></div>
                        <div class="col-2"></div>
                      </div>

                      <!-- HeartRate -->
                      <div class="d-flex text-center  row align-items-center mb-3">
                        <div class="col-2 text-end ">
                          Heart Rate
                        </div>
                        <div class="col">
                          <input class="form-control" type="text" id="minhr" name="minhr"/>
                        </div>
                        <div class="col">
                          <input class="form-control" type="text" id="avghr" name="avghr"/>
                        </div>
                        <div class="col">
                          <input class="form-control" type="text" id="maxhr" name="maxhr"/>
                        </div>
                        <div class="col-2 text-start">
                          bpm
                        </div>
                      </div>
                            
                      <!-- Pace -->
                      <div class="d-flex row align-items-center">
                        <div class="col-2 text-end ">
                          Pace
                        </div>
                        <div class="col">
                          <input class="form-control" type="text" id="minpace" name="minpace"/>
                        </div>
                        <div class="col">
                          <input class="form-control" type="text" id="avgpace" name="avgpace" readonly/>
                        </div>
                        <div class="col">
                          <input class="form-control" type="text" id="maxpace" name="maxpace"/>
                        </div>
                        <div class="col-2 text-start">
                          sec / 100m
                        </div>
                      </div>
                    </div>

                    <div class="d-flex col-6 flex-column">
                      <div class="row p-2 mb-3">
                        <label for="description">Description</label>
                        <textarea class="form-control" type="textarea" id="description" name="description"></textarea>
                      </div>
                      
                      <label for="smileyrange">How do you feel?</label>
                      <div class="row mb-3" id="smileyrange">

                        <div class="col smileys">
                          <label>           
                            <input type="radio" class="smiley form-control" name="feeling" value ="5"><i class="far fa-grin-hearts smiley" style="font-size:2rem"></i></button>
                          </label>
                        </div>
                        
                        <div class="col smileys">
                          <label>           
                            <input type="radio" class="smiley form-control" name="feeling" value ="4"><i class="far fa-grin smiley" style="font-size:2rem"></i></button>
                          </label>
                        </div>
                        
                        <div class="col smileys">
                          <label>           
                            <input type="radio" class="smiley form-control" name="feeling" value ="3"><i class="far fa-meh smiley" style="font-size:2rem"></i></button>
                          </label>
                        </div>
                        
                        <div class="col smileys">
                          <label>           
                            <input type="radio" class="smiley form-control" name="feeling" value ="2"><i class="far fa-sad-tear smiley" style="font-size:2rem"></i></button>
                            </label>
                        </div>
                        
                        <div class="col smileys">
                          <label>           
                            <input type="radio" class="smiley form-control" name="feeling" value ="1"><i class="far fa-sad-cry smiley" style="font-size:2rem"></i></button>
                          </label>
                        </div>
                        
                      </div>

                      <div class="row form-group p-2">
                        <label for="perceivedexertion" class="form-label">Perceived Exertion</label>
                        <input type="range" class="form-range" min="1" max="10" id="perceivedexertion" name="perceivedexertion">
                      </div>

                      <div class="row p-2 text-center mb-3" id="rangevalue" style="height:2rem">
                      </div>

                      <div class="row form-group p-2">
                        <label for="comments" class="form-label">Post Activity Comments</label>
                        <textarea class="form-control" name="comments" id="comments" rows="5"></textarea>
                      </div>
                    </div>

                </div>
              </div>
              <div class="col-6">workout details editor</div>
            </div>
          </div>
          
        </form> 
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="submit" form="trainingform" class="btn btn-primary" value="submit">Save changes</button>
        
      </div>
    </div>
  </div>
</div>

<!-- Modal -->
<div id="infoModal" class="modal fade">
<div class="modal-dialog">
  <div class="modal-content">
    <div class="modal-header">
      <h4 class="modal-title" id="infoModalTitle"></h4>
      <button type="button" class="close" data-bs-dismiss="modal">
          <span aria-hidden="true">×</span>
          <span class="sr-only">close</span>
        </button>
    </div>
    <div class="modal-body" id="infoModalBody">
    </div>
    <div class="modal-footer">
    </div>
  </div>
</div>
</div>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary btn-circle" data-bs-toggle="modal" data-bs-target="#makeNewModal">
  <i class="fa fa-plus"></i>
</button>

<!-- ChartJS -->
<script defer>
  // to insert data
  // inject into myLineChart.data <- array


  Chart.LineElement.prototype.draw(()=>{
      Chart.LineElement.prototype.draw().apply(this, arguments);

      this.chart.textAlign = "center"
      // y value and x index
      this.chart.fillText("ZONE1", this.scale.calculateX(3.5), this.scale.calculateY(20.75))
      this.chart.fillText("ZONE2", this.scale.calculateX(11.5), this.scale.calculateY(13))
      this.chart.fillText("ZONE3", this.scale.calculateX(2), this.scale.calculateY(9.75))
      this.chart.fillText("ZONE4", this.scale.calculateX(14.5), this.scale.calculateY(22.75))
    });

const ctx = document.getElementById('myChart');;

// starts with no data
const data = [
  {
    x: 1617253200000,
    y: 10
  },
  {
    x: 1617256800000,
    y: 50
  },
  {
    x: 1617260400000,
    y: 30
  },
    {
    x: 1617260800000,
    y: 30
  }
];

const config = {
  responsive: true,
  plugins:{
    legend:{
      display: false
    },
    title:{
      display: false
    },
    tooltip: {
      callbacks: {
        title: function(context) {
          const timeString = new Date(context[0].parsed.x).toLocaleTimeString(navigator.language, {
            hour: '2-digit',
            minute:'2-digit'
          })

          return timeString
        }
      }
    },
    dragData: {        
          round: 0,
          dragX: false,
          showTooltip: true,
          onDragStart:function (e, datasetIndex, index, value) {
          },
          onDrag: function (e, datasetIndex, index, value) {
              e.target.style.cursor = 'grabbing'
              //console.log("Drag Value: ", value.x)
          },
          onDragEnd: function (e, datasetIndex, index, value) {
              e.target.style.cursor = 'default'
          },
      },
    },
    scales: {
        x:{
          type: 'linear',
          min: 1617253200000,
          max: 1617300800000,
          ticks: {
            callback(v) {
              return new Date(v).toLocaleTimeString(navigator.language, {
                hour: '2-digit',
                minute:'2-digit'
              })
            }
          }
        },
        y:{
           beginAtZero: true,
                steps: 1,
                stepValue: 1,
                max: 100
          },
      }
};


let myLineChart = new Chart(ctx, {
    type: 'line',
    data: {
      datasets: [
        {
          data:data,
          fill:true,
          stepped:true}
      ]
    },
    options: config
});


const button = document.querySelector('.append-button')
button.addEventListener('click', (e)=> {

  console.log('hi >> ')
  let util = myLineChart.data.datasets[0].data;
  const addValue = (xvalue, yvalue) => {
    const value = {x: xvalue, y: yvalue};
    util.push(value)
      // TODO: change the scaling due to input
  // myLineChart.options.scales.x.min
  }

  const removeValue = (xvalue, yvalue) => {
    
    const indexOfvalue = util.findIndex(element => element.x == xvalue && element.y == yvalue);
    util.splice(indexOfvalue,1);

    // TODO: change scaling due to removal
  }

  const getCurrentX = () => {
    return util[util.length-1].x;
  }

  console.log(getCurrentX());

  addValue(1617262000000, 100);
  addValue(1617264000000, 100);

  //mandatory to update chart after addition or removal
  myLineChart.update();

  // TODO: make min and max the min and max values of the data


})

</script>


</body>
</html>
